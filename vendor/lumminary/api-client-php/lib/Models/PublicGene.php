<?php
/**
 * PublicGene
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lumminary\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Lumminary API
 *
 * A general-purpose API for accessing genomic data
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lumminary\Client\Models;

use \ArrayAccess;
use \Lumminary\Client\ObjectSerializer;

/**
 * PublicGene Class Doc Comment
 *
 * @category Class
 * @package  Lumminary\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicGene implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublicGene';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'molecularEndPosition' => 'int',
        'snpIds' => 'string[]',
        'symbol' => 'string',
        'molecularStartPosition' => 'int',
        'parentAccession' => 'string',
        'chromosome' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'molecularEndPosition' => null,
        'snpIds' => null,
        'symbol' => null,
        'molecularStartPosition' => null,
        'parentAccession' => null,
        'chromosome' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'molecularEndPosition' => 'molecular_end_position',
        'snpIds' => 'snp_ids',
        'symbol' => 'symbol',
        'molecularStartPosition' => 'molecular_start_position',
        'parentAccession' => 'parent_accession',
        'chromosome' => 'chromosome'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'molecularEndPosition' => 'setMolecularEndPosition',
        'snpIds' => 'setSnpIds',
        'symbol' => 'setSymbol',
        'molecularStartPosition' => 'setMolecularStartPosition',
        'parentAccession' => 'setParentAccession',
        'chromosome' => 'setChromosome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'molecularEndPosition' => 'getMolecularEndPosition',
        'snpIds' => 'getSnpIds',
        'symbol' => 'getSymbol',
        'molecularStartPosition' => 'getMolecularStartPosition',
        'parentAccession' => 'getParentAccession',
        'chromosome' => 'getChromosome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['molecularEndPosition'] = isset($data['molecularEndPosition']) ? $data['molecularEndPosition'] : null;
        $this->container['snpIds'] = isset($data['snpIds']) ? $data['snpIds'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['molecularStartPosition'] = isset($data['molecularStartPosition']) ? $data['molecularStartPosition'] : null;
        $this->container['parentAccession'] = isset($data['parentAccession']) ? $data['parentAccession'] : null;
        $this->container['chromosome'] = isset($data['chromosome']) ? $data['chromosome'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['molecularEndPosition'] === null) {
            $invalidProperties[] = "'molecularEndPosition' can't be null";
        }
        if (($this->container['molecularEndPosition'] < 0)) {
            $invalidProperties[] = "invalid value for 'molecularEndPosition', must be bigger than or equal to 0.";
        }

        if ($this->container['snpIds'] === null) {
            $invalidProperties[] = "'snpIds' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((strlen($this->container['symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['molecularStartPosition'] === null) {
            $invalidProperties[] = "'molecularStartPosition' can't be null";
        }
        if (($this->container['molecularStartPosition'] < 0)) {
            $invalidProperties[] = "invalid value for 'molecularStartPosition', must be bigger than or equal to 0.";
        }

        if ($this->container['parentAccession'] === null) {
            $invalidProperties[] = "'parentAccession' can't be null";
        }
        if ((strlen($this->container['parentAccession']) < 1)) {
            $invalidProperties[] = "invalid value for 'parentAccession', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['chromosome'] === null) {
            $invalidProperties[] = "'chromosome' can't be null";
        }
        if ((strlen($this->container['chromosome']) < 1)) {
            $invalidProperties[] = "invalid value for 'chromosome', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['molecularEndPosition'] === null) {
            return false;
        }
        if ($this->container['molecularEndPosition'] < 0) {
            return false;
        }
        if ($this->container['snpIds'] === null) {
            return false;
        }
        if ($this->container['symbol'] === null) {
            return false;
        }
        if (strlen($this->container['symbol']) < 1) {
            return false;
        }
        if ($this->container['molecularStartPosition'] === null) {
            return false;
        }
        if ($this->container['molecularStartPosition'] < 0) {
            return false;
        }
        if ($this->container['parentAccession'] === null) {
            return false;
        }
        if (strlen($this->container['parentAccession']) < 1) {
            return false;
        }
        if ($this->container['chromosome'] === null) {
            return false;
        }
        if (strlen($this->container['chromosome']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets molecularEndPosition
     *
     * @return int
     */
    public function getMolecularEndPosition()
    {
        return $this->container['molecularEndPosition'];
    }

    /**
     * Sets molecularEndPosition
     *
     * @param int $molecularEndPosition The gene's end position on the scaffold
     *
     * @return $this
     */
    public function setMolecularEndPosition($molecularEndPosition)
    {

        if (($molecularEndPosition < 0)) {
            throw new \InvalidArgumentException('invalid value for $molecularEndPosition when calling PublicGene., must be bigger than or equal to 0.');
        }

        $this->container['molecularEndPosition'] = $molecularEndPosition;

        return $this;
    }

    /**
     * Gets snpIds
     *
     * @return string[]
     */
    public function getSnpIds()
    {
        return $this->container['snpIds'];
    }

    /**
     * Sets snpIds
     *
     * @param string[] $snpIds The SNPs contained in the gene
     *
     * @return $this
     */
    public function setSnpIds($snpIds)
    {
        $this->container['snpIds'] = $snpIds;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol The gene accession string
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {

        if ((strlen($symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling PublicGene., must be bigger than or equal to 1.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets molecularStartPosition
     *
     * @return int
     */
    public function getMolecularStartPosition()
    {
        return $this->container['molecularStartPosition'];
    }

    /**
     * Sets molecularStartPosition
     *
     * @param int $molecularStartPosition The gene's start position on the scaffold
     *
     * @return $this
     */
    public function setMolecularStartPosition($molecularStartPosition)
    {

        if (($molecularStartPosition < 0)) {
            throw new \InvalidArgumentException('invalid value for $molecularStartPosition when calling PublicGene., must be bigger than or equal to 0.');
        }

        $this->container['molecularStartPosition'] = $molecularStartPosition;

        return $this;
    }

    /**
     * Gets parentAccession
     *
     * @return string
     */
    public function getParentAccession()
    {
        return $this->container['parentAccession'];
    }

    /**
     * Sets parentAccession
     *
     * @param string $parentAccession The scaffold on which the gene is placed
     *
     * @return $this
     */
    public function setParentAccession($parentAccession)
    {

        if ((strlen($parentAccession) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parentAccession when calling PublicGene., must be bigger than or equal to 1.');
        }

        $this->container['parentAccession'] = $parentAccession;

        return $this;
    }

    /**
     * Gets chromosome
     *
     * @return string
     */
    public function getChromosome()
    {
        return $this->container['chromosome'];
    }

    /**
     * Sets chromosome
     *
     * @param string $chromosome The cromosome on which the gene is placed
     *
     * @return $this
     */
    public function setChromosome($chromosome)
    {

        if ((strlen($chromosome) < 1)) {
            throw new \InvalidArgumentException('invalid length for $chromosome when calling PublicGene., must be bigger than or equal to 1.');
        }

        $this->container['chromosome'] = $chromosome;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


