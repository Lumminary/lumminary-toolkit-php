<?php
/**
 * Authorization
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lumminary\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Lumminary API
 *
 * A general-purpose API for accessing genomic data
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lumminary\Client\Models;

use \ArrayAccess;
use \Lumminary\Client\ObjectSerializer;

/**
 * Authorization Class Doc Comment
 *
 * @category Class
 * @package  Lumminary\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Authorization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Authorization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scopes' => '\Lumminary\Client\Models\AccessScope',
        'clientUuid' => 'string',
        'isActive' => 'bool',
        'authorizationUuid' => 'string',
        'productUuid' => 'string',
        'state' => 'string',
        'createTimestamp' => 'int',
        'reportCredentials' => '\Lumminary\Client\Models\ReportCredentials[]',
        'reportFiles' => '\Lumminary\Client\Models\ReportFile[]',
        'order' => 'string',
        'sequenceNumber' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scopes' => null,
        'clientUuid' => null,
        'isActive' => null,
        'authorizationUuid' => null,
        'productUuid' => null,
        'state' => null,
        'createTimestamp' => null,
        'reportCredentials' => null,
        'reportFiles' => null,
        'order' => null,
        'sequenceNumber' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scopes' => 'scopes',
        'clientUuid' => 'client_uuid',
        'isActive' => 'is_active',
        'authorizationUuid' => 'authorization_uuid',
        'productUuid' => 'product_uuid',
        'state' => 'state',
        'createTimestamp' => 'create_timestamp',
        'reportCredentials' => 'report_credentials',
        'reportFiles' => 'report_files',
        'order' => 'order',
        'sequenceNumber' => 'sequence_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scopes' => 'setScopes',
        'clientUuid' => 'setClientUuid',
        'isActive' => 'setIsActive',
        'authorizationUuid' => 'setAuthorizationUuid',
        'productUuid' => 'setProductUuid',
        'state' => 'setState',
        'createTimestamp' => 'setCreateTimestamp',
        'reportCredentials' => 'setReportCredentials',
        'reportFiles' => 'setReportFiles',
        'order' => 'setOrder',
        'sequenceNumber' => 'setSequenceNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scopes' => 'getScopes',
        'clientUuid' => 'getClientUuid',
        'isActive' => 'getIsActive',
        'authorizationUuid' => 'getAuthorizationUuid',
        'productUuid' => 'getProductUuid',
        'state' => 'getState',
        'createTimestamp' => 'getCreateTimestamp',
        'reportCredentials' => 'getReportCredentials',
        'reportFiles' => 'getReportFiles',
        'order' => 'getOrder',
        'sequenceNumber' => 'getSequenceNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['clientUuid'] = isset($data['clientUuid']) ? $data['clientUuid'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['authorizationUuid'] = isset($data['authorizationUuid']) ? $data['authorizationUuid'] : null;
        $this->container['productUuid'] = isset($data['productUuid']) ? $data['productUuid'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['createTimestamp'] = isset($data['createTimestamp']) ? $data['createTimestamp'] : null;
        $this->container['reportCredentials'] = isset($data['reportCredentials']) ? $data['reportCredentials'] : null;
        $this->container['reportFiles'] = isset($data['reportFiles']) ? $data['reportFiles'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['sequenceNumber'] = isset($data['sequenceNumber']) ? $data['sequenceNumber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['clientUuid'] === null) {
            $invalidProperties[] = "'clientUuid' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalidProperties[] = "'isActive' can't be null";
        }
        if ($this->container['authorizationUuid'] === null) {
            $invalidProperties[] = "'authorizationUuid' can't be null";
        }
        if ($this->container['productUuid'] === null) {
            $invalidProperties[] = "'productUuid' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['createTimestamp'] === null) {
            $invalidProperties[] = "'createTimestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['scopes'] === null) {
            return false;
        }
        if ($this->container['clientUuid'] === null) {
            return false;
        }
        if ($this->container['isActive'] === null) {
            return false;
        }
        if ($this->container['authorizationUuid'] === null) {
            return false;
        }
        if ($this->container['productUuid'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        if ($this->container['createTimestamp'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets scopes
     *
     * @return \Lumminary\Client\Models\AccessScope
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \Lumminary\Client\Models\AccessScope $scopes scopes
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets clientUuid
     *
     * @return string
     */
    public function getClientUuid()
    {
        return $this->container['clientUuid'];
    }

    /**
     * Sets clientUuid
     *
     * @param string $clientUuid The UUID of the client owning the Dataset to which the product is authorized
     *
     * @return $this
     */
    public function setClientUuid($clientUuid)
    {
        $this->container['clientUuid'] = $clientUuid;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive If false, the the authorization is revoked and data access authorizations fail
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets authorizationUuid
     *
     * @return string
     */
    public function getAuthorizationUuid()
    {
        return $this->container['authorizationUuid'];
    }

    /**
     * Sets authorizationUuid
     *
     * @param string $authorizationUuid Identifier of the Authorization
     *
     * @return $this
     */
    public function setAuthorizationUuid($authorizationUuid)
    {
        $this->container['authorizationUuid'] = $authorizationUuid;

        return $this;
    }

    /**
     * Gets productUuid
     *
     * @return string
     */
    public function getProductUuid()
    {
        return $this->container['productUuid'];
    }

    /**
     * Sets productUuid
     *
     * @param string $productUuid Identifier of the Product to be authorized
     *
     * @return $this
     */
    public function setProductUuid($productUuid)
    {
        $this->container['productUuid'] = $productUuid;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The authorization state. One of : ['authorization_state_pending_dataset', 'authorization_state_fulfillable', 'authorization_state_result_available', 'authorization_state_not_fulfillable']
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets createTimestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['createTimestamp'];
    }

    /**
     * Sets createTimestamp
     *
     * @param int $createTimestamp Creation timestamp for the Authorization
     *
     * @return $this
     */
    public function setCreateTimestamp($createTimestamp)
    {
        $this->container['createTimestamp'] = $createTimestamp;

        return $this;
    }

    /**
     * Gets reportCredentials
     *
     * @return \Lumminary\Client\Models\ReportCredentials[]
     */
    public function getReportCredentials()
    {
        return $this->container['reportCredentials'];
    }

    /**
     * Sets reportCredentials
     *
     * @param \Lumminary\Client\Models\ReportCredentials[] $reportCredentials reportCredentials
     *
     * @return $this
     */
    public function setReportCredentials($reportCredentials)
    {
        $this->container['reportCredentials'] = $reportCredentials;

        return $this;
    }

    /**
     * Gets reportFiles
     *
     * @return \Lumminary\Client\Models\ReportFile[]
     */
    public function getReportFiles()
    {
        return $this->container['reportFiles'];
    }

    /**
     * Sets reportFiles
     *
     * @param \Lumminary\Client\Models\ReportFile[] $reportFiles reportFiles
     *
     * @return $this
     */
    public function setReportFiles($reportFiles)
    {
        $this->container['reportFiles'] = $reportFiles;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order Optional UUID of the Order that created the Authorization
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets sequenceNumber
     *
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequenceNumber'];
    }

    /**
     * Sets sequenceNumber
     *
     * @param int $sequenceNumber The sequence number of the Authorization. Used as a filter when fetching new Authorizations
     *
     * @return $this
     */
    public function setSequenceNumber($sequenceNumber)
    {
        $this->container['sequenceNumber'] = $sequenceNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


